#package /ospl

// Initialize bootstrap DDS entities
int16 ddsInit()

// Readonly variables that are automatically set by library
string uri: null
uint32 domainId: 0
string domainName: null
bool singleProcess: false

// Stub Typedefs
class Typedef::
  type: object
  lang/type actualType()

// Member class with extra information about actual type
class Member: lang/member, parentState=DECLARED::
  actualType: object

// Base struct for all DDS instances. Automatically fills key members based on
// the object name.
struct BaseType::
  int16 init()

// Get actual type (if object is typedef, unwind)
lang/type actualType(object type)

// Add actualType annotation (for mapping types not natively supported by corto)
void annotateActualType(object o, object t)
object annotateGetActualType(object o)

// Add optional annotation
void annotateOptional(object o, bool optional)
bool annotateGetOptional(object o)

// Native DDS types
native/type DDS_Participant: "DDS_DomainParticipant"
native/type DDS_Publisher: "DDS_Publisher"
native/type DDS_Subscriber: "DDS_Subscriber"
native/type DDS_Topic: "DDS_Topic"
native/type DDS_Condition: "DDS_Condition"
native/type DDS_ReadCondition: "DDS_ReadCondition"
native/type DDS_GuardCondition: "DDS_GuardCondition"
native/type DDS_DataReader: "DDS_DataReader"
native/type DDS_DataWriter: "DDS_DataWriter"

// Native ospl types
native/type ospl_copyProgram: "ospl_copyProgram"

// Convert type to a metadescriptor.
string toMetaXml(struct type)

// Inject type from metadescriptor
int16 fromMetaXml(string xml)

// Type used to copy out data from DCPSTopic samples
class DCPSTopic::
  name: string
  type_name: string
  meta_data: string
  key_list: string

// Wait for topic
DCPSTopic waitForTopic(string pattern)

// Register type for a topic using typedescriptors from DCPSTopic
DCPSTopic registerTypeForTopic(string topicName, string keys)

// Create a new topic for corto type
DDS_Topic registerTopic(string topicName, lang/type type, string keys)

// Mount data from topic
class Connector : mount,hidden ::
  alias mount: mount/mount
  alias type: mount/type
  alias policy: mount/policy
  partitionTopic: string
  keys: string
  dstType: lang/type, readonly

  partition: string, readonly|local
  topic: string, readonly|local

  quit: bool, private|local
  thread: word, private|local
  ddsSub: DDS_Subscriber, private|local
  ddsPub: DDS_Publisher, private|local
  ddsTopic: DDS_Topic, private|local
  ddsReader: DDS_DataReader, private|local
  ddsWriter: DDS_DataWriter, private|local

  program: ospl_copyProgram, private|local

  int16 construct()
  void destruct()
  void onUpdate(object observable)
  void onDelete(object observable)
